{"version":3,"sources":["Components/Calculator.jsx","App.js","serviceWorker.js","index.js"],"names":["Calculator","props","useState","equation","setEquation","calcsList","setCalcsList","io","socket","lastResult","setLastResult","useEffect","on","data","disconnect","calculator","displayValue","firstOperand","waitingForSecondOperand","operator","addToEquation","e","addEquationsToCalcsList","emit","handleDigit","digit","updateDisplay","handleOperator","nextOperator","inputValue","parseFloat","currentValue","result","performCalculation","String","secondOperand","document","querySelector","value","className","type","disabled","onClick","target","decimal","includes","map","i","key","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.026d5015.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport io from 'socket.io-client';\n\nconst Calculator = (props) => {\n\n    let [equation, setEquation] = useState(\"\");\n    let [calcsList, setCalcsList] = useState([]);\n    const [socket] = useState(() => io(':8000'));\n    const [lastResult, setLastResult] = useState(\"\");\n\n\n    useEffect(() => {\n        socket.on('updateCalcsList', data => setCalcsList([data,...calcsList]));\n        return () => socket.disconnect\n    },[socket,calcsList])\n\n    socket.on(\"newcalc\", equation => {\n        setCalcsList([equation,...calcsList])\n    })\n\n    const setSocket = e => {\n        socket.emit(\"equation\",{equation})\n        setCalcsList([{equation},...calcsList])\n    }\n\n    const calculator = {\n        displayValue: '0',\n        firstOperand: null,\n        waitingForSecondOperand: false,\n        operator: null,\n    };\n\n    const addToEquation = (e) => {\n        setEquation = (equation += e)\n    }\n\n    const addEquationsToCalcsList = (e) => {\n        setEquation = \"\";\n        setSocket(e);\n    }\n\n    const handleDigit = (digit) => {\n        const {displayValue, waitingForSecondOperand} = calculator;\n        addToEquation(digit);\n        if (waitingForSecondOperand === true) {\n            calculator.displayValue = digit;\n            calculator.waitingForSecondOperand = false;\n            updateDisplay();\n        } else {\n            calculator.displayValue = displayValue === \"0\" || lastResult === \"\" ? digit: displayValue + digit;\n            updateDisplay();\n        }\n    }\n\n    const handleAllClear = () => {\n        calculator.displayValue = '0';\n        calculator.firstOperand = null;\n        calculator.waitingForSecondOperand = null;\n        calculator.operator = null;\n        setEquation(\"\")\n        setLastResult(\"\");\n        updateDisplay();\n    }\n\n    const handleDecimal = (decimal) => {\n        addToEquation(decimal);\n        if (!calculator.displayValue.includes(decimal)) {\n            calculator.displayValue += decimal;\n            updateDisplay();\n        }\n    }\n\n    const handleOperator = (nextOperator) => {\n        addToEquation(nextOperator);\n        const { firstOperand, displayValue, operator } = calculator;\n        // set existing string displayValue to float \n        const inputValue = parseFloat(displayValue)\n        \n        if (operator && calculator.waitingForSecondOperand) {\n            calculator.operator = nextOperator;\n            return;\n        }\n\n        if (firstOperand == null) {\n            calculator.firstOperand = inputValue;\n        }\n        \n        //if variables and operands have already been added, calc partial result or full result\n        else if(operator) {\n            const currentValue = firstOperand || 0;\n            const result = performCalculation[operator](currentValue, inputValue);\n\n            if (nextOperator === \"=\") {\n                //push result to equation string only on \"=\"\n                addToEquation(result); \n                addEquationsToCalcsList(equation)\n                setLastResult(result);   \n                updateDisplay(result);   \n            }\n            calculator.displayValue = String(result);\n            calculator.firstOperand = result;\n            updateDisplay();\n        }\n        calculator.waitingForSecondOperand = true;\n        calculator.operator = nextOperator;\n    }\n\n    const performCalculation = {\n        '/': (firstOperand,secondOperand) => firstOperand / secondOperand,\n        '*': (firstOperand, secondOperand) => firstOperand * secondOperand,\n        '+': (firstOperand, secondOperand) => firstOperand + secondOperand,\n        '-': (firstOperand, secondOperand) => firstOperand - secondOperand,\n        '=': (firstOperand, secondOperand) => secondOperand    \n    };\n\n\n    const updateDisplay = () => {\n        const display = document.querySelector('.calculator-screen');\n        display.value = calculator.displayValue;\n    }\n\n\n    return (\n\n        <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"col\">\n            <div className=\"calculator card\">\n                {/* if last result isn't null, show lastResult, else displayValue */}\n                <input type=\"text\" className=\"calculator-screen z-depth-1\" value={lastResult !== \"\" ? lastResult : calculator.displayValue} disabled />\n\n                <div className=\"calculator-keys\">\n\n                    <button type=\"button\" className=\"operator btn btn-primary\" value=\"+\" onClick = {e => handleOperator(e.target.value)}>+</button>\n                    <button type=\"button\" className=\"operator btn btn-primary\" value=\"-\" onClick = {e => handleOperator(e.target.value)}>-</button>\n                    <button type=\"button\" className=\"operator btn btn-primary\" value=\"*\" onClick = {e => handleOperator(e.target.value)}>&times;</button>\n                    <button type=\"button\" className=\"operator btn btn-primary\" value=\"/\" onClick = {e => handleOperator(e.target.value)}>&divide;</button>\n\n                    <button type=\"button\" value=\"7\" className=\"btn btn-light waves-effect\" onClick = {e => handleDigit(e.target.value)}>7</button>\n                    <button type=\"button\" value=\"8\" className=\"btn btn-light waves-effect\" onClick = {e => handleDigit(e.target.value)}>8</button>\n                    <button type=\"button\" value=\"9\" className=\"btn btn-light waves-effect\" onClick = {e => handleDigit(e.target.value)}>9</button>\n\n\n                    <button type=\"button\" value=\"4\" className=\"btn btn-light waves-effect\" onClick = {e => handleDigit(e.target.value)}>4</button>\n                    <button type=\"button\" value=\"5\" className=\"btn btn-light waves-effect\" onClick = {e => handleDigit(e.target.value)}>5</button>\n                    <button type=\"button\" value=\"6\" className=\"btn btn-light waves-effect\" onClick = {e => handleDigit(e.target.value)}>6</button>\n\n\n                    <button type=\"button\" value=\"1\" className=\"btn btn-light waves-effect\" onClick = {e => handleDigit(e.target.value)}>1</button>\n                    <button type=\"button\" value=\"2\" className=\"btn btn-light waves-effect\" onClick = {e => handleDigit(e.target.value)}>2</button>\n                    <button type=\"button\" value=\"3\" className=\"btn btn-light waves-effect\" onClick = {e => handleDigit(e.target.value)}>3</button>\n\n\n                    <button type=\"button\" value=\"0\" className=\"btn btn-light waves-effect\" onClick = {e => handleDigit(e.target.value)}>0</button>\n                    <button type=\"button\" className=\"decimal function btn btn-secondary\" value=\".\" onClick = {e => handleDecimal(e.target.value)}>.</button>\n                    <button type=\"button\" className=\"all-clear function btn btn-danger btn-sm\" value=\"all-clear\" onClick = {handleAllClear}>AC</button>\n\n                    <button type=\"button\" className=\"equal-sign operator btn btn-success\" value=\"=\" onClick = {e => handleOperator(e.target.value)}>=</button>\n\n                </div>\n            \n                </div>\n            </div>\n            <div className=\"col\">\n                <div className=\"calculations_list\" >\n                <h1>List of calculations:</h1>\n                <ul className=\"list-group\" >\n                    {\n                        //show 10 calcs, newest to oldest\n                        calcsList.map((equation, i) =>\n                            i <=9 ?\n                            <li key = {i} className=\"list-group-item\">{equation.equation}</li> : null\n                        )\n                    }\n                </ul>\n            </div>\n            </div>  \n        </div>\n      </div>\n              \n    )\n   \n}\n\nexport default Calculator;","import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Calculator from './Components/Calculator'\nimport './App.css';\n\n \n\nfunction App() {\n \n  return (\n    \n\n      <div className=\"container\">\n        \n          <Calculator></Calculator>\n         \n      </div>\n  );\n}\n \nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}